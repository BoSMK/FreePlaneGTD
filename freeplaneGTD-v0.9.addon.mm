<map version="freeplane 1.3.0">
<!--To view this file, download free mind mapping software Freeplane from http://freeplane.sourceforge.net -->
<node TEXT="Freeplane|GTD" ID="ID_1723255651" CREATED="1283093380553" MODIFIED="1412342239572" BACKGROUND_COLOR="#97c7dc" LINK="http://www.itworks.hu/index.php/freeplane-gtd+">
<font SIZE="16" BOLD="true" ITALIC="true"/>
<hook NAME="MapStyle">
    <properties show_icon_for_attributes="true" show_note_icons="true"/>

<map_styles>
<stylenode LOCALIZED_TEXT="styles.root_node">
<stylenode LOCALIZED_TEXT="styles.predefined" POSITION="right">
<stylenode LOCALIZED_TEXT="default" COLOR="#000000" STYLE="as_parent" MAX_WIDTH="600" MIN_WIDTH="1">
<font NAME="SansSerif" SIZE="12" BOLD="false" ITALIC="false"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.details"/>
<stylenode LOCALIZED_TEXT="defaultstyle.note"/>
<stylenode LOCALIZED_TEXT="defaultstyle.floating">
<edge STYLE="hide_edge"/>
<cloud COLOR="#f0f0f0" SHAPE="ROUND_RECT"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.user-defined" POSITION="right">
<stylenode LOCALIZED_TEXT="styles.topic" COLOR="#18898b" STYLE="fork">
<font NAME="Liberation Sans" SIZE="12" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subtopic" COLOR="#cc3300" STYLE="fork">
<font NAME="Liberation Sans" SIZE="12" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subsubtopic" COLOR="#669900">
<font NAME="Liberation Sans" SIZE="12" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.important">
<icon BUILTIN="yes"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.AutomaticLayout" POSITION="right">
<stylenode LOCALIZED_TEXT="AutomaticLayout.level.root" COLOR="#000000">
<font SIZE="20"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,1" COLOR="#0033ff">
<font SIZE="18"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,2" COLOR="#00b439">
<font SIZE="16"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,3" COLOR="#990000">
<font SIZE="14"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,4" COLOR="#111111">
<font SIZE="12"/>
</stylenode>
</stylenode>
</stylenode>
</map_styles>
</hook>
<attribute_layout NAME_WIDTH="133" VALUE_WIDTH="161"/>
<attribute NAME="name" VALUE="freeplaneGTD"/>
<attribute NAME="version" VALUE="v0.9"/>
<attribute NAME="author" VALUE="Gergely Papp"/>
<attribute NAME="freeplaneVersionFrom" VALUE="1.2.10"/>
<attribute NAME="freeplaneVersionTo" VALUE=""/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The homepage of this add-on should be set as the link of the root node.
    </p>
    <p>
      The basic properties of this add-on. They can be used in script names and other attributes, e.g. "${name}.groovy".
    </p>
    <ul>
      <li>
        name: The name of the add-on, normally a technically one (no spaces, no special characters except _.-).
      </li>
      <li>
        author: Author's name(s) and (optionally) email adresses.
      </li>
      <li>
        version: Since it's difficult to protect numbers like 1.0 from Freeplane's number parser it's advised to prepend a 'v' to the number, e.g. 'v1.0'.
      </li>
      <li>
        freeplane-version-from: The oldest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too old.
      </li>
      <li>
        freeplane-version-to: Normally empty: The newest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too new.
      </li>
    </ul>
  </body>
</html>
</richcontent>
<edge COLOR="#999999"/>
<node TEXT="description" POSITION="left" ID="ID_1125389651" CREATED="1323057303632" MODIFIED="1330899611117" HGAP="100" VSHIFT="-40">
<edge COLOR="#999999" WIDTH="3"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Description would be awkward to edit as an attribute.
    </p>
    <p>
      So you have to put the add-on description as a child of the <i>'description'</i>&#xA0;node.
    </p>
  </body>
</html>
</richcontent>
<node ID="ID_833172562" CREATED="1323057648210" MODIFIED="1412235539130" HGAP="-170" VSHIFT="-100" BACKGROUND_COLOR="#ffff99"><richcontent TYPE="NODE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Freeplane|GTD creates views of GTD-style Next Action lists extracted from a mind map, providing views:
    </p>
    <ul>
      <li>
        By Project
      </li>
      <li>
        By Context (where the next action gets done)
      </li>
      <li>
        By Owner (who owns it, if not you)
      </li>
      <li>
        By Due Date (when)
      </li>
    </ul>
    <p>
      The completed tasks can be filtered.
    </p>
  </body>
</html>
</richcontent>
<edge COLOR="#999999"/>
</node>
</node>
<node TEXT="changes" POSITION="left" ID="ID_1824187995" CREATED="1323057303648" MODIFIED="1330899611132" HGAP="10" VSHIFT="10">
<edge COLOR="#999999" WIDTH="3"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Change log of this add-on: append one node for each noteworthy version and put the details for each version into a child node.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="v0.6" ID="ID_47409214" CREATED="1323059645367" MODIFIED="1324325847122" VSHIFT="-10">
<edge COLOR="#999999"/>
<node TEXT="First add-on release" ID="ID_1768457101" CREATED="1323059651882" MODIFIED="1323063753570">
<edge COLOR="#999999"/>
</node>
</node>
<node TEXT="v0.7" ID="ID_996008688" CREATED="1324325692137" MODIFIED="1324325839809" VSHIFT="-20">
<node TEXT="Shorthand markup parsing, code refactored" ID="ID_1258100495" CREATED="1324325700575" MODIFIED="1324325734325"/>
</node>
<node TEXT="v0.8" ID="ID_776957693" CREATED="1324325737356" MODIFIED="1324325841294">
<node TEXT="Hyperlinking to nodes from next action lists, default When = This Week, Today icon marking" ID="ID_1912232580" CREATED="1324325742669" MODIFIED="1324325832544"/>
</node>
<node TEXT="v0.8.1" ID="ID_1198786223" CREATED="1330899459648" MODIFIED="1330899464242">
<node TEXT="Fixed bug in ConvertShorthand parsing (wasn't checking if node was empty before parsing)" ID="ID_1164324645" CREATED="1330899465976" MODIFIED="1330899506757"/>
</node>
<node TEXT="v0.9" ID="ID_572557266" CREATED="1412234595612" MODIFIED="1412234604776">
<node TEXT="Added support to close the GTD window with ESC key" ID="ID_1472554613" CREATED="1412234606290" MODIFIED="1412234640800"/>
<node TEXT="Added Done icon marking" ID="ID_604610036" CREATED="1412234674774" MODIFIED="1412234695195"/>
<node TEXT="Showing done items crossed out in project view" ID="ID_1821447082" CREATED="1412234652469" MODIFIED="1412234711939"/>
<node TEXT="Added support to filter done items" ID="ID_1754543634" CREATED="1412234641316" MODIFIED="1412234652057"/>
<node TEXT="Parsed and reformatted set dates to use uniform, locale specific date format (NB. truncates time from items)" ID="ID_1754543635" CREATED="1412234641316" MODIFIED="1412234652057"/>
</node>
</node>
<node TEXT="license" POSITION="left" ID="ID_1073906233" CREATED="1323057303663" MODIFIED="1330899611148" VSHIFT="-10">
<edge COLOR="#999999" WIDTH="3"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The add-ons's license that the user has to accept before she can install it.
    </p>
    <p>
      
    </p>
    <p>
      The License text has to be entered as a child of the <i>'license'</i>&#xA0;node, either as plain text or as HTML.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="This add-on is free software: you can redistribute it and/or modify&#10;it under the terms of the GNU General Public License as published by&#10;the Free Software Foundation, either version 3 of the License, or&#10;(at your option) any later version.&#10;&#10;This program is distributed in the hope that it will be useful,&#10;but WITHOUT ANY WARRANTY; without even the implied warranty of&#10;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#10;GNU General Public License for more details." ID="ID_1763974336" CREATED="1323057303679" MODIFIED="1323093766804" HGAP="90">
<edge COLOR="#999999"/>
</node>
</node>
<node TEXT="preferences.xml" POSITION="left" ID="ID_800601165" CREATED="1323057303742" MODIFIED="1330899611164" HGAP="30" VSHIFT="-20">
<edge COLOR="#999999" WIDTH="3"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      <font face="SansSerif, sans-serif" color="#000000">The child node contains the add-on configuration as an extension to mindmapmodemenu.xml (in Tools-&gt;Preferences-&gt;Add-ons). </font>
    </p>
    <p>
      <font face="SansSerif, sans-serif" color="#000000">Every property in the configuration should receive a default value in <i>default.properties</i>&#xA0;node.</font>
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="default.properties" POSITION="left" ID="ID_680880217" CREATED="1323057303742" MODIFIED="1412323002596">
<edge COLOR="#999999" WIDTH="3"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      These properties play together with the preferences: Each property defined in the preferences should have a default value in the attributes of this node.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="translations" POSITION="left" ID="ID_170932006" CREATED="1323057303757" MODIFIED="1330899611211" HGAP="80" VSHIFT="10">
<edge COLOR="#999999" WIDTH="3"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The translation keys that this script uses. Define one child node per supported locale. The attributes contain the translations. Define at least 'addons.${name}' for the add-on's name.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="en" ID="ID_590286510" CREATED="1323057303773" MODIFIED="1323172993335" HGAP="50" VSHIFT="10">
<attribute_layout NAME_WIDTH="210" VALUE_WIDTH="152"/>
<attribute NAME="addons.${name}" VALUE="FreeplaneGTD"/>
<attribute NAME="main_menu_scripting/freeplaneGTD" VALUE="FreeplaneGTD"/>
<attribute NAME="addons.listNextActions" VALUE="Next action list"/>
<edge COLOR="#999999"/>
</node>
</node>
<node TEXT="deinstall" POSITION="left" ID="ID_1357879524" CREATED="1323057303788" MODIFIED="1330899611211" HGAP="170" VSHIFT="21">
<edge COLOR="#999999" WIDTH="3"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      List of files and/or directories to remove on deinstall
    </p>
  </body>
</html>
</richcontent>
<attribute_layout NAME_WIDTH="60" VALUE_WIDTH="346"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}.script.xml"/>
<attribute NAME="delete" VALUE="${installationbase}/scripts/freeplaneGTD.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/icons/fpgtdIcon.png"/>
<attribute NAME="delete" VALUE="${installationbase}/resources/images/freeplaneGTD.png"/>
<attribute NAME="delete" VALUE="${installationbase}/resources/images/freeplaneGTD-icon.png"/>
<attribute NAME="delete" VALUE="${installationbase}/resources/images/fpgtdLogo.png"/>
</node>
<node TEXT="scripts" POSITION="right" ID="ID_111817827" CREATED="1323057303804" MODIFIED="1330899611257" HGAP="90" VSHIFT="-90">
<edge COLOR="#999999" WIDTH="3"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain multiple scripts. The node text defines the script name (e.g. inserInlineImage.groovy). Its properties have to be configured via attributes:
    </p>
    <p>
      
    </p>
    <p>
      * menuLocation: &lt;locationkey&gt;
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- Defines where the menu location.
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;-&#xA0;See mindmapmodemenu.xml for how the menu locations look like.
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- http://freeplane.bzr.sf.net/bzr/freeplane/freeplane_program/trunk/annotate/head%3A/freeplane/resources/xml/mindmapmodemenu.xml
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * menuTitleKey: &lt;key&gt;
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- The menu item title will be looked up under the translation key &lt;key&gt; - don't forget to define its translation.
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * executionMode: &lt;mode&gt;
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- The execution mode as described in the Freeplane wiki (http://freeplane.sourceforge.net/wiki/index.php/Scripting)
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- ON_SINGLE_NODE: Execute the script once. The <i>node</i>&#xA0;variable is set to the selected node.
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- ON_SELECTED_NODE: Execute the script n times for n selected nodes, once for each node.
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- ON_SELECTED_NODE_RECURSIVELY: Execute the script on every selected node and recursively on all of its children.
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- In doubt use ON_SINGLE_NODE.
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * keyboardShortcut: &lt;shortcut&gt;
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- Optional: keyboard combination / accelerator for this script, e.g. control alt I
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- Use lowercase letters for modifiers and uppercase for letters. Use no + signs.
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- The available key names are listed at http://download.oracle.com/javase/1.4.2/docs/api/java/awt/event/KeyEvent.html#VK_0
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;In the list only entries with a 'VK_' prefix count. Omit the prefix in the shortcut definition.
    </p>
    <p>
      
    </p>
    <p>
      * Permissions&#xA0;that the script(s) require, each either false or true:
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- execute_scripts_without_asking
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- execute_scripts_without_file_restriction: permission to read files
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- execute_scripts_without_write_restriction: permission to create/change/delete files
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- execute_scripts_without_exec_restriction: permission to execute other programs
    </p>
    <p>
      &#xA0;&#xA0;&#xA0;- execute_scripts_without_network_restriction: permission to access the network
    </p>
    <p>
      &#xA0;&#xA0;Notes:
    </p>
    <p>
      &#xA0;&#xA0;- The set of permissions is fixed.
    </p>
    <p>
      &#xA0;&#xA0;- Don't change the attribute names, don't omit one.
    </p>
    <p>
      &#xA0;&#xA0;- Set the values either to true or to false
    </p>
    <p>
      &#xA0;&#xA0;- In any case set execute_scripts_without_asking to true unless you want to annoy users.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="freeplaneGTD.groovy" ID="ID_875504923" CREATED="1323057833226" MODIFIED="1412441574918" HGAP="30">
<attribute_layout NAME_WIDTH="275" VALUE_WIDTH="212"/>
<attribute NAME="menuTitleKey" VALUE="addons.listNextActions"/>
<attribute NAME="menuLocation" VALUE="main_menu_scripting/freeplaneGTD"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE="control H"/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="false"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="false"/>
<edge COLOR="#999999"/>
<node TEXT="// @ExecutionModes({on_single_node=&quot;main_menu_scripting/freeplaneGTD[addons.listNextActions]&quot;})&#10;//=========================================================&#10;// Freeplane GTD&#10;//&#10;// Groovy script to extract GTD-style Next Action list&#10;// from a Freeplane mind map&#10;//&#10;// Version 0.9&#10;//&#10;// Copyright (c)2014 Gergely Papp&#10;// Copyright (c)2011 Auxilus Systems LLC&#10;//&#10;// This program is free software: you can redistribute it and/or modify&#10;// it under the terms of the GNU General Public License as published by&#10;// the Free Software Foundation, either version 3 of the License, or&#10;// any later version.&#10;//&#10;// This program is distributed in the hope that it will be useful,&#10;// but WITHOUT ANY WARRANTY; without even the implied warranty of&#10;// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#10;// GNU General Public License for more details.&#10;//&#10;// You should have received a copy of the GNU General Public License&#10;// along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#10;//&#10;//=========================================================&#10;&#10;&#10;//=========================================================&#10;// references&#10;//=========================================================&#10;import javax.swing.*;&#10;import javax.swing.event.*;&#10;import javax.swing.event.ChangeEvent;&#10;import javax.swing.event.ChangeListener;&#10;import javax.swing.text.*;&#10;import javax.swing.text.html.HTMLEditorKit;&#10;import javax.swing.text.html.StyleSheet;&#10;import javax.swing.ImageIcon;&#10;import javax.swing.UIManager;&#10;&#10;import java.awt.*;&#10;import java.awt.BorderLayout;&#10;import java.awt.datatransfer.*;&#10;import java.awt.Dimension;&#10;import java.awt.event.*;&#10;import java.awt.event.KeyEvent;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.awt.event.WindowAdapter;&#10;import java.awt.event.WindowEvent;&#10;import java.awt.Graphics;&#10;import java.awt.Graphics2D;&#10;import java.awt.GridLayout;&#10;import java.awt.print.*;&#10;import java.awt.Toolkit;&#10;&#10;import java.net.URL;&#10;&#10;import java.text.ParsePosition;&#10;import java.text.SimpleDateFormat;&#10;&#10;import java.util.Date;&#10;&#10;import org.freeplane.core.ui.components.UITools;&#10;import org.freeplane.plugin.script.proxy.ControllerProxy;&#10;import org.freeplane.plugin.script.proxy.Proxy;&#10;import org.freeplane.core.resources.ResourceController;&#10;//=========================================================&#10;// classes&#10;//=========================================================&#10;&#10;//---------------------------------------------------------&#10;// GTDReport: creates GUI for next action lists&#10;//---------------------------------------------------------&#10;public class GTDReport {&#10;&#10;&#9;private static GTDReport gtdReport = new GTDReport();&#10;&#10;&#9;private String txtVer = &quot;0.9&quot;;&#10;&#9;private String txtURI = &quot;http://www.itworks.hu/index.php/freeplane-gtd+&quot;;&#10;&#9;private GTDMapReader gtdMapReader;&#10;&#9;private Proxy.Controller ctrl;&#10;&#9;private String ByProject = &quot;&quot;;&#10;&#9;private String ByContext = &quot;&quot;;&#10;&#9;private String ByWho = &quot;&quot;;&#10;&#9;private String ByWhen = &quot;&quot;;&#10;&#9;private int selTab = 0;&#10;&#9;private String userPath = &quot;&quot;;&#10;&#9;private JLabel reportByProject = new JLabel();&#10;&#9;private JLabel reportByContext = new JLabel();&#10;&#9;private JLabel reportByWho = new JLabel();&#10;&#9;private JLabel reportByWhen = new JLabel();&#10;&#9;private JEditorPane htmlByProject = new JEditorPane(&quot;text/html&quot;, &quot;Project&quot;);&#10;&#9;private JEditorPane htmlByContext = new JEditorPane(&quot;text/html&quot;, &quot;Context&quot;);&#10;&#9;private JEditorPane htmlByWho = new JEditorPane(&quot;text/html&quot;, &quot;Who&quot;);&#10;&#9;private JEditorPane htmlByWhen = new JEditorPane(&quot;text/html&quot;, &quot;When&quot;);&#10;&#9;private JTabbedPane tabbedPane = new JTabbedPane();&#10;&#10;&#9;//--------------------------------------------------------------&#10;&#9;// private constructor for singleton pattern&#10;&#9;private GTDReport() {&#10;&#10;&#9;}&#10;&#10;&#9;public static synchronized GTDReport getInstance(){&#10;&#9;&#9;return gtdReport;&#10;&#9;}&#10;&#10;&#9;protected JComponent makeTextPanel(JEditorPane filler) {&#10;&#9;&#9;JPanel panel = new JPanel(false);&#10;&#9;&#9;filler.setEditable(false);&#10;&#9;&#9;filler.addHyperlinkListener(new NodeLink(this));&#10;&#9;&#9;HTMLEditorKit kit = (HTMLEditorKit)filler.getEditorKit();&#10;&#9;&#9;StyleSheet styleSheet = kit.getStyleSheet();&#10;&#9;&#9;styleSheet.addRule(&quot;body {color:#000000; font-family:Verdana, Arial; font-size:12pt; padding: 10px 25px 0px 25px; }&quot;);&#10;&#9;&#9;styleSheet.addRule(&quot;h1 {font-size:20pt; font-weight:bold}&quot;);&#10;&#9;&#9;styleSheet.addRule(&quot;a {text-decoration: none; color:#990000;}&quot;);&#10;&#9;&#9;panel.setLayout(new GridLayout(1, 1));&#10;&#9;&#9;panel.add(filler);&#10;&#9;&#9;return panel;&#10;&#9;}&#10;&#10;&#9;private JPanel buildReportPanel(){&#10;&#10;&#9;&#9;// setup panel to contain tabbed pane&#10;&#9;&#9;JPanel reportPanel = new JPanel();&#10;&#9;&#9;reportPanel.setLayout(new GridLayout(1,1));&#10;&#9;&#9;ImageIcon icon = null;&#10;&#10;&#9;&#9;// build By Project tab&#10;&#9;&#9;JComponent panel1 = makeTextPanel(htmlByProject);&#10;&#9;&#9;panel1.setBackground(Color.WHITE);&#10;&#9;&#9;JScrollPane scrollpane1 = new JScrollPane(panel1);&#10;&#9;&#9;tabbedPane.addTab(&quot;&lt;html&gt;&lt;body height=50&gt;&lt;b&gt;&lt;i&gt;By Project&lt;/i&gt;&lt;/b&gt;&lt;br/&gt;&lt;h1 style='color:#666666; font-size:24pt; text-align:center;'&gt;&quot; + gtdMapReader.getCountNextActions().toString() + &quot;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;, icon, scrollpane1, &quot;List next actions by project&quot;);&#10;&#9;&#9;&#10;&#9;&#9;// build By Who tab&#10;&#9;&#9;JComponent panel3 = makeTextPanel(htmlByWho);&#10;&#9;&#9;panel3.setBackground(Color.WHITE);&#10;&#9;&#9;JScrollPane scrollpane3 = new JScrollPane(panel3);&#10;&#9;&#9;tabbedPane.addTab(&quot;&lt;html&gt;&lt;body height=50&gt;&lt;b&gt;&lt;i&gt;By Who&lt;/i&gt;&lt;/b&gt;&lt;br/&gt;&lt;h1 style='color:#666666; font-size:24pt; text-align:center;'&gt;&quot; + gtdMapReader.getCountDelegated().toString() + &quot;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;, icon, scrollpane3, &quot;List next actions by owners (who)&quot;);&#10;&#10;&#9;&#9;// build By Context tab&#10;&#9;&#9;JComponent panel2 = makeTextPanel(htmlByContext);&#10;&#9;&#9;panel2.setBackground(Color.WHITE);&#10;&#9;&#9;JScrollPane scrollpane2 = new JScrollPane(panel2);&#10;&#9;&#9;tabbedPane.addTab(&quot;&lt;html&gt;&lt;body height=50&gt;&lt;b&gt;&lt;i&gt;By Context&lt;/i&gt;&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;&quot;, icon, scrollpane2, &quot;List next actions by context (Context done)&quot;);&#10;&#10;&#9;&#9;// build By When tab&#10;&#9;&#9;JComponent panel4 = makeTextPanel(htmlByWhen);&#10;&#9;&#9;panel4.setBackground(Color.WHITE);&#10;&#9;&#9;JScrollPane scrollpane4 = new JScrollPane(panel4);&#10;&#9;&#9;tabbedPane.addTab(&quot;&lt;html&gt;&lt;body height=50&gt;&lt;b&gt;&lt;i&gt;By When&lt;/i&gt;&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;&quot;, icon, scrollpane4, &quot;List next actions by due date (when)&quot;);&#10;&#10;&#9;&#9;// build About tab&#10;&#9;&#9;String txtAbout = &quot;&lt;html&gt;&lt;body style='padding-left:25px;'&gt;&lt;h1&gt;Freeplane|&lt;span style='color:#ff3300;'&gt;GTD&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;Version &quot; + txtVer + &quot;&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;&quot;;&#10;&#9;&#9;JPanel panel5 = new JPanel(false);&#10;&#9;&#9;String imgURL = userPath + &quot;/resources/images/fpgtdLogo.png&quot;;&#10;&#9;&#9;//UITools.informationMessage(imgURL.toString());&#10;&#9;&#9;ImageIcon iconLogo = null;&#10;&#9;&#9;if (imgURL!=null){&#10;&#9;&#9;&#9;iconLogo = new ImageIcon(imgURL);&#10;&#9;&#9;}&#10;&#9;&#9;JLabel appName = new JLabel(txtAbout,iconLogo,JLabel.CENTER);&#10;&#9;&#9;appName.setHorizontalAlignment(JLabel.CENTER);&#10;&#9;&#9;panel5.setLayout(new GridLayout(2, 1));&#10;&#9;&#9;panel5.add(appName);&#10;&#9;&#9;JLabel linkURL = new JLabel(&quot;&lt;html&gt;&lt;h4&gt;by Gergely Papp&lt;br/&gt;&lt;h5&gt;based on the original code by Auxilus Systems LLC&lt;/h5&gt;&lt;h4&gt;Licensed under GNU GPL Version 3&lt;/h4&gt;&lt;a href='&quot;+txtURI+&quot;'&gt;&quot;+txtURI+&quot;&lt;/a&gt;&lt;/html&gt;&quot;);&#10;&#9;&#9;linkURL.setHorizontalAlignment(JLabel.CENTER);&#10;&#9;&#9;linkURL.setCursor(new Cursor(Cursor.HAND_CURSOR));&#10;&#9;&#9;linkURL.addMouseListener(new MouseAdapter() {&#10;&#9;&#9;&#9;public void mouseClicked(MouseEvent e) {&#10;&#9;&#9;&#9;&#9;URI uriLink = new URI(txtURI);&#10;&#9;&#9;&#9;&#9;browseLink(uriLink);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#9;&#9;panel5.add(linkURL);&#10;&#9;&#9;panel5.setBackground(Color.WHITE);&#10;&#9;&#9;JScrollPane scrollpane5 = new JScrollPane(panel5);&#10;&#9;&#9;tabbedPane.addTab(&quot;&lt;html&gt;&lt;body height=50&gt;&lt;b&gt;&lt;i&gt;About&lt;/i&gt;&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;&quot;, icon, scrollpane5, &quot;About Freeplane|GTD&quot;);&#10;&#10;&#9;&#9;// Enable scrolling tabs and set location&#10;&#9;&#9;tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);&#10;&#9;&#9;tabbedPane.setTabPlacement(JTabbedPane.RIGHT);&#10;&#10;&#9;&#9;// Register a change listener to track selected tab&#10;&#9;&#9;tabbedPane.addChangeListener(new ChangeListener() {&#10;&#9;&#9;&#9;public void stateChanged(ChangeEvent evt) {&#10;&#9;&#9;&#9;&#9;JTabbedPane pane = (JTabbedPane)evt.getSource();&#10;&#9;&#9;&#9;&#9;// Get current tab index&#10;&#9;&#9;&#9;&#9;selTab = pane.getSelectedIndex();&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#10;&#9;&#9;// Add the tabbed pane to this panel.&#10;&#9;&#9;reportPanel.add(tabbedPane);&#10;&#10;&#9;&#9;return reportPanel;&#10;&#9;}&#10;&#10;&#9;public String ProjectReport() {&#10;&#9;&#9;return ByProject;&#9;&#10;&#9;}&#10;&#10;&#9;public String ContextReport() {&#10;&#9;&#9;return ByContext;&#10;&#9;}&#10;&#10;&#9;public String OwnerReport() {&#10;&#9;&#9;return ByWho;&#10;&#9;}&#10;&#10;&#9;public String DueReport() {&#10;&#9;&#9;return ByWhen;&#10;&#9;}&#10;&#10;&#9;public int TabIndex(){&#10;&#9;&#9;return selTab;&#10;&#9;}&#10;&#10;&#9;public void setUserPath(String path){&#10;&#9;&#9;userPath = path;&#10;&#9;}&#10;&#10;&#9;public void setController(Proxy.Controller controller){&#10;&#9;&#9;ctrl = controller;&#10;&#9;}&#10;&#10;&#9;public Proxy.Controller getController(){&#10;&#9;&#9;return ctrl;&#10;&#9;}&#10;&#10;&#9;public void setMapReader(GTDMapReader MapReader){&#10;&#9;&#9;gtdMapReader = MapReader;&#10;&#9;&#9;this.Refresh();&#10;&#9;}&#10;&#10;&#9;private static void browseLink(URI uri) {&#10;&#9;&#9;if (Desktop.isDesktopSupported()) {&#10;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;Desktop.getDesktop().browse(uri);&#10;&#9;&#9;&#9;} catch (IOException e) { /* TODO: error handling */ }&#10;&#9;&#9;} else { /* TODO: error handling */ }&#10;&#9;}&#10;&#10;&#9;public void Show() {&#10;&#9;&#9;//Create and set up the window&#10;&#9;&#9;ImageIcon icon = new ImageIcon(userPath + &quot;/icons/fpgtdIcon.png&quot;);&#10;&#9;&#9;JFrame frame = new JFrame(&quot;Freeplane|GTD Next Actions&quot;);&#10;&#9;&#9;frame.setIconImage(icon.getImage());&#10;&#9;&#9;frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);&#10;&#10;&#9;&#9;// on ESC key close frame&#10;&#9;&#9;frame.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(&#10;&#9;&#9;KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), &quot;Cancel&quot;);&#10;&#9;&#9;frame.getRootPane().getActionMap().put(&quot;Cancel&quot;, new AbstractAction(){&#10;&#9;&#9;&#9;public void actionPerformed(ActionEvent e) {&#10;&#9;&#9;&#9;&#9;frame.setVisible(false);&#10;&#9;&#9;&#9;&#9;frame.dispose();&#10;&#9;&#9;&#9;}&#9;&#10;&#9;&#9;});&#10;&#10;&#9;&#9;// on close window the close method is called&#10;&#9;&#9;frame.addWindowListener(new WindowAdapter() {&#10;&#9;&#9;&#9;public void windowClosing(java.awt.event.WindowEvent evt) {&#10;&#9;&#9;&#9;&#9;frame.setVisible(false);&#10;&#9;&#9;&#9;&#9;frame.dispose();&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#10;&#9;&#9;//Add next action report panel to the window&#10;&#9;&#9;JPanel reportPanel = this.buildReportPanel();&#10;&#9;&#9;frame.add(reportPanel, BorderLayout.CENTER);&#10;&#10;&#9;&#9;// Add command buttons&#10;&#9;&#9;JPanel cmdPanel = new JPanel();&#10;&#9;&#9;BoxLayout boxH = new BoxLayout(cmdPanel, BoxLayout.X_AXIS);&#10;&#9;&#9;cmdPanel.setLayout(boxH);&#10;&#9;&#9;JButton refreshButton = new JButton(&quot;Refresh&quot;);&#10;&#9;&#9;refreshButton.addActionListener(new RefreshUIWindow(this));&#10;&#9;&#9;JButton printButton = new JButton(&quot;Print&quot;);&#10;&#9;&#9;printButton.addActionListener(new PrintUIWindow(this));&#10;&#9;&#9;JButton copyButton = new JButton(&quot;Copy&quot;);&#10;&#9;&#9;copyButton.addActionListener(new CopyUIWindow(this));&#10;&#9;&#9;JButton cancelButton = new JButton(&quot;Cancel&quot;);&#10;&#9;&#9;cancelButton.addActionListener(new CloseUIWindow(frame));&#10;&#9;&#9;cmdPanel.add(refreshButton);&#10;&#9;&#9;cmdPanel.add(printButton);&#10;&#9;&#9;cmdPanel.add(copyButton);&#10;&#9;&#9;cmdPanel.add(cancelButton);&#10;&#10;&#9;&#9;// Create filter button for done items&#10;&#9;&#9;JCheckBox cbShowDone = new JCheckBox(&quot;Show done&quot;);&#10;&#9;&#9;cbShowDone.addChangeListener(new ChangeListener() {&#10;&#9;&#9;&#9;void stateChanged (ChangeEvent event) {&#10;&#9;&#9;&#9;&#9;JCheckBox cb = event.getSource();&#10;&#9;&#9;&#9;&#9;gtdMapReader.filterDone=cb.selected;&#10;&#9;&#9;&#9;&#9;Refresh();&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#9;&#9;cmdPanel.add(cbShowDone);&#10;&#10;&#9;&#9;frame.add(cmdPanel, BorderLayout.SOUTH);&#10;&#10;&#9;&#9;// make the frame half the height and width&#10;&#9;&#9;Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();&#10;&#9;&#9;int frHeight = (screenSize.height)/4*3;&#10;&#9;&#9;int frWidth = (screenSize.width)/4*3;&#10;&#10;&#9;&#9;//Display the window&#10;&#9;&#9;frame.pack();&#10;&#9;&#9;frame.setSize(frWidth,frHeight);&#10;&#9;&#9;frame.setLocationRelativeTo(UITools.frame);&#10;&#9;&#9;frame.setVisible(true);&#10;&#9;}&#10;&#10;&#9;public void Refresh() {&#10;&#9;&#9;// Get next actions from GTD mind map&#10;&#9;&#9;gtdMapReader.ParseMap();&#10;&#10;&#9;&#9;// Get HTML for next action lists&#10;&#9;&#9;ByProject = gtdMapReader.getHTMLByProject();&#10;&#9;&#9;ByContext = gtdMapReader.getHTMLByContext();&#10;&#9;&#9;ByWho = gtdMapReader.getHTMLByWho();&#10;&#9;&#9;ByWhen = gtdMapReader.getHTMLByWhen();&#10;&#10;&#9;&#9;// add reports to labels&#10;&#9;&#9;htmlByProject.setText(ByProject);&#10;&#9;&#9;htmlByContext.setText(ByContext);&#10;&#9;&#9;htmlByWho.setText(ByWho);&#10;&#9;&#9;htmlByWhen.setText(ByWhen);&#10;&#10;&#9;&#9;// update counts on tabs&#10;&#9;&#9;if (tabbedPane.tabCount&gt;0){&#10;&#9;&#9;&#9;tabbedPane.setTitleAt(0, &quot;&lt;html&gt;&lt;body height=50&gt;By Project&lt;br/&gt;&lt;h1 style='color:#666666;text-align:center;'&gt;&quot; + gtdMapReader.getCountNextActions().toString() + &quot;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;);&#10;&#9;&#9;&#9;tabbedPane.setTitleAt(1, &quot;&lt;html&gt;&lt;body height=50&gt;By Who&lt;br/&gt;&lt;h1 style='color:#666666;text-align:center;'&gt;&quot; + gtdMapReader.getCountDelegated().toString() + &quot;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;);&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;&#10;//---------------------------------------------------------&#10;// GTDMapReader: reads and parses GTD map for next actions&#10;//---------------------------------------------------------&#10;public class GTDMapReader {&#10;&#10;&#9;private String ByProject = &quot;&quot;;&#10;&#9;private String ByContext = &quot;&quot;;&#10;&#9;private String ByWho = &quot;&quot;;&#10;&#9;private String ByWhen = &quot;&quot;;&#10;&#9;private boolean filterDone = false;&#10;&#9;private int CountNextActions = 0;&#10;&#9;private int CountDelegated = 0;&#10;&#9;private String htmlBodyStyle = &quot;&lt;html&gt;&lt;body&gt;\n&quot;;&#10;&#9;private String IconNextAction = &quot;yes&quot;;&#10;&#9;private String IconProject = &quot;list&quot;;&#10;&#9;private String IconToday = &quot;excellent&quot;;&#10;&#9;private String IconDone = &quot;button_ok&quot;;&#10;&#9;private String NodeNextActionIcon =&quot;Icon: Next action&quot;;&#10;&#9;private String NodeProjectIcon =&quot;Icon: Project&quot;;&#10;&#9;private String NodeTodayIcon =&quot;Icon: Today&quot;;&#10;&#9;private String NodeDoneIcon =&quot;Icon: Done&quot;;&#10;&#9;private Proxy.Node RootNode;&#10;&#9;private def NAList;&#10;&#9;private def ProjectList;&#10;&#10;&#9;//--------------------------------------------------------------&#10;&#9;// constructor&#10;&#9;public GTDMapReader(Proxy.Node rootNode){&#10;&#9;&#9;RootNode = rootNode;&#10;&#9;}&#10;&#10;&#9;//--------------------------------------------------------------&#10;&#9;// properties&#10;&#9;public String getNextActionIcon() {&#10;&#9;&#9;IconNextAction = findIconKey(RootNode,NodeNextActionIcon,IconNextAction);&#10;&#9;&#9;return IconNextAction;&#10;&#9;}&#10;&#10;&#9;public String getProjectIcon() {&#10;&#9;&#9;IconProject = findIconKey(RootNode,NodeProjectIcon,IconProject);&#10;&#9;&#9;return IconProject;&#10;&#9;}&#10;&#10;&#9;public String getTodayIcon(){&#10;&#9;&#9;IconToday = findIconKey(RootNode,NodeTodayIcon,IconToday);&#10;&#9;&#9;return IconToday;&#10;&#9;}&#10;&#10;&#9;public String getDoneIcon(){&#10;&#9;&#9;IconDone = findIconKey(RootNode,NodeDoneIcon,IconDone);&#10;&#9;&#9;return IconDone;&#10;&#9;}&#10;&#10;&#9;public def getProjectList(){&#10;&#9;&#9;ProjectList = findProjects(RootNode,IconProject);&#10;&#9;&#9;return ProjectList;&#10;&#9;}&#10;&#10;&#9;public def getNAList(){&#10;&#9;&#9;NAList = findNextActions(RootNode, ProjectList,IconNextAction,IconToday,IconDone);&#10;&#9;&#9;return NAList;&#10;&#9;}&#10;&#10;&#9;public int getCountNextActions(){&#10;&#9;&#9;return CountNextActions;&#10;&#9;}&#10;&#10;&#9;public int getCountDelegated(){&#10;&#9;&#9;return CountDelegated;&#10;&#9;}&#10;&#10;&#9;public String getHTMLByProject(){&#10;&#9;&#9;ByProject = htmlBodyStyle;&#10;&#9;&#9;def naByProject = NAList.groupBy{it['project']};&#10;&#9;&#9;naByProject = naByProject.sort{it.toString().toLowerCase()};&#10;&#9;&#9;if(naByProject.size()&gt;0) {&#10;&#9;&#9;&#9;CountNextActions = 0;&#10;&#9;&#9;&#9;naByProject.each {&#10;&#9;&#9;&#9;&#9;key, value -&gt; String strProject = key;&#10;&#9;&#9;&#9;&#9;ByProject += &quot;&lt;h1&gt;&quot; + strProject + &quot;&lt;/h1&gt;\n&lt;ul&gt;\n&quot;;&#10;&#9;&#9;&#9;&#9;naByProject[strProject].each {&#10;&#9;&#9;&#9;&#9;&#9;CountNextActions = CountNextActions + 1;&#10;&#9;&#9;&#9;&#9;&#9;String strContext = it['context'];&#10;&#9;&#9;&#9;&#9;&#9;String strWho = it['who'];&#10;&#9;&#9;&#9;&#9;&#9;String strWhen = it['when'];&#10;&#9;&#9;&#9;&#9;&#9;boolean done = it['done'];&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if (strWho==&quot;tbd&quot;){strWho = &quot;&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;if (strWhen==&quot;tbd&quot;){strWhen = &quot;&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;String strOwner = &quot;&quot;;&#10;&#9;&#9;&#9;&#9;&#9;String strDue = &quot;&quot;;&#10;&#9;&#9;&#9;&#9;&#9;if (strWho.length()&gt;0){strOwner = &quot;[&quot; + strWho + &quot;]&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;if (strWhen.length()&gt;0){strDue = &quot;{&quot; + strWhen + &quot;}&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;String strAssign = strOwner + &quot; &quot; + strDue;&#10;&#9;&#9;&#9;&#9;&#9;strAssign = strAssign.trim();&#10;&#9;&#9;&#9;&#9;&#9;ByProject += &quot;\t&lt;li&gt;&quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;(done?&quot;&lt;strike&gt;&quot;:&quot;&quot;) +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&quot;&lt;a href='&quot; + it['nodeID'] + &quot;'&gt;&quot; + it['action'] + &quot;&lt;/a&gt;&quot; + (strContext==null ? &quot;&quot;:&quot; @&quot; + strContext + &quot; &quot;) + strAssign +&#10;&#9;&#9;&#9;&#9;&#9;&#9;(done?&quot;&lt;/strike&gt;&quot;:&quot;&quot;) +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;&lt;/li&gt;\n&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;ByProject += &quot;&lt;/ul&gt;\n&quot;;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;else {&#10;&#9;&#9;&#9;ByProject += &quot;&lt;h1 style='color:#666666;'&gt;No Next Actions Found On This Map&lt;/h1&gt;&lt;p&gt;Make sure to mark Next Actions with icon specified by 'Icon:Next action' node under 'Settings' node&lt;/p&gt;&quot;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;ByProject += &quot;&lt;/body&gt;&lt;/html&gt;&quot;;&#10;&#10;&#9;&#9;return ByProject;&#10;&#9;}&#10;&#10;&#9;public String getHTMLByContext(){&#10;&#9;&#9;ByContext = htmlBodyStyle;&#10;&#9;&#9;def naByContext = NAList.groupBy{it['context']};&#10;&#9;&#9;naByContext = naByContext.sort{it.toString().toLowerCase()};&#10;&#9;&#9;if (naByContext.size()&gt;0){&#10;&#9;&#9;&#9;naByContext.each {&#10;&#9;&#9;&#9;&#9;key, value -&gt; String strContext = key;&#10;&#9;&#9;&#9;&#9;ByContext += &quot;&lt;h1&gt;&quot; + (strContext==null ? &quot;Unspecified&quot; : strContext) + &quot;&lt;/h1&gt;\n&lt;ul&gt;\n&quot;;&#10;&#9;&#9;&#9;&#9;naByContext[strContext].each {&#10;&#9;&#9;&#9;&#9;&#9;String strProject = it['project'];&#10;&#9;&#9;&#9;&#9;&#9;String strWho = it['who'];&#10;&#9;&#9;&#9;&#9;&#9;String strWhen = it['when'];&#10;&#9;&#9;&#9;&#9;&#9;boolean done = it['done'];&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if (strWho==&quot;tbd&quot;){strWho = &quot;&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;if (strWhen==&quot;tbd&quot;){strWhen = &quot;&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;String strOwner = &quot;&quot;;&#10;&#9;&#9;&#9;&#9;&#9;String strDue = &quot;&quot;;&#10;&#9;&#9;&#9;&#9;&#9;if (strWho.length()&gt;0){strOwner = &quot;[&quot; + strWho + &quot;]&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;if (strWhen.length()&gt;0){strDue = &quot;{&quot; + strWhen + &quot;}&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;String strAssign = strOwner + &quot; &quot; + strDue;&#10;&#9;&#9;&#9;&#9;&#9;strAssign = strAssign.trim();&#10;&#9;&#9;&#9;&#9;&#9;ByContext += &quot;\t&lt;li&gt;&quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;(done?&quot;&lt;strike&gt;&quot;:&quot;&quot;) +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&quot;&lt;a href='&quot; + it['nodeID'] + &quot;'&gt;&quot; + it['action'] + &quot;&lt;/a&gt;&quot; + &quot; (for: &quot; + strProject + &quot;)&quot; + &quot; &quot; + strAssign +&#10;&#9;&#9;&#9;&#9;&#9;&#9;(done?&quot;&lt;/strike&gt;&quot;:&quot;&quot;) +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;&lt;/li&gt;\n&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;ByContext += &quot;&lt;/ul&gt;\n&quot;;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;else {&#10;&#9;&#9;&#9;ByContext += &quot;&lt;h1 style='color:#666666;'&gt;No Next Actions Found On This Map&lt;/h1&gt;&lt;p&gt;Make sure to mark Next Actions with icon specified by 'Icon:Next action' node under 'Settings' node&lt;/p&gt;&quot;&#10;&#9;&#9;}&#10;&#9;&#9;ByContext += &quot;&lt;/body&gt;&lt;/html&gt;&quot;;&#10;&#9;&#9;return ByContext;&#10;&#9;}&#10;&#10;&#9;public String getHTMLByWho(){&#10;&#9;&#9;ByWho = htmlBodyStyle;&#10;&#9;&#9;def naByWho = NAList.groupBy{it['who']};&#10;&#9;&#9;naByWho = naByWho.sort{it.toString().toLowerCase()};&#10;&#9;&#9;CountDelegated = 0;&#10;&#9;&#9;naByWho.each {&#10;&#9;&#9;&#9;key, value -&gt; String strWho = key;&#10;&#9;&#9;&#9;if (strWho!=&quot;tbd&quot;){&#10;&#9;&#9;&#9;&#9;ByWho += &quot;&lt;h1&gt;&quot; + strWho + &quot;&lt;/h1&gt;\n&lt;ul&gt;\n&quot;;&#10;&#9;&#9;&#9;&#9;naByWho[strWho].each {&#10;&#9;&#9;&#9;&#9;&#9;CountDelegated = CountDelegated + 1;&#10;&#9;&#9;&#9;&#9;&#9;String strProject = it['project'];&#10;&#9;&#9;&#9;&#9;&#9;String strWhen = it['when'];&#10;&#9;&#9;&#9;&#9;&#9;String strContext = it['context'];&#10;&#9;&#9;&#9;&#9;&#9;boolean done = it['done'];&#10;&#9;&#9;&#9;&#9;&#9;if (strWhen==&quot;tbd&quot;){strWhen = &quot;&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;strWhen = strWhen.trim();&#10;&#9;&#9;&#9;&#9;&#9;if (strWhen.length()&gt;0){strWhen = &quot; {&quot; + strWhen + &quot;}&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;ByWho += &quot;\t&lt;li&gt;&quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;(done?&quot;&lt;strike&gt;&quot;:&quot;&quot;) +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&quot;&lt;a href='&quot; + it['nodeID'] + &quot;'&gt;&quot; + it['action'] + &quot;&lt;/a&gt;&quot; + (strContext==null ? &quot;&quot;:&quot; @&quot; + strContext + &quot; &quot;) + &quot; (for: &quot; + strProject + &quot;)&quot; + strWhen +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;(done?&quot;&lt;/strike&gt;&quot;:&quot;&quot;) +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&quot;&lt;/li&gt;\n&quot;;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;ByWho += &quot;&lt;/ul&gt;\n&quot;;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;if (ByWho == htmlBodyStyle){&#10;&#9;&#9;&#9;ByWho += &quot;&lt;h1 style='color:#666666;'&gt;No Delegated Next Actions Found On This Map&lt;/h1&gt;&lt;p&gt;Use ALT-F9 to add a 'Who' attribute to a Next Action node&lt;/p&gt;&quot;;&#10;&#9;&#9;}&#10;&#9;&#9;ByWho += &quot;&lt;/body&gt;&lt;/html&gt;&quot;;&#10;&#9;&#9;return ByWho;&#10;&#9;}&#10;&#10;&#9;public String getHTMLByWhen(){&#10;&#9;&#9;ByWhen = htmlBodyStyle;&#10;&#9;&#9;def naByWhen = NAList.groupBy{it['when']};&#10;&#9;&#9;naByWhen = naByWhen.sort{it.toString().toLowerCase()};&#10;&#9;&#9;naByWhen = sortDateWhen(naByWhen);&#10;&#9;&#9;naByWhen.each {&#10;&#9;&#9;&#9;key, value -&gt; String strWhen = key;&#10;&#9;&#9;&#9;if (strWhen!=&quot;tbd&quot;){&#10;&#9;&#9;&#9;&#9;ByWhen += &quot;&lt;h1&gt;&quot; + strWhen + &quot;&lt;/h1&gt;\n&lt;ul&gt;\n&quot;;&#10;&#9;&#9;&#9;&#9;naByWhen[strWhen].each {&#10;&#9;&#9;&#9;&#9;&#9;String strProject = it['project'];&#10;&#9;&#9;&#9;&#9;&#9;String strWho = it['who'];&#10;&#9;&#9;&#9;&#9;&#9;String strContext = it['context'];&#10;&#9;&#9;&#9;&#9;&#9;boolean done = it['done'];&#10;&#9;&#9;&#9;&#9;&#9;if (strWho==&quot;tbd&quot;){strWho = &quot;&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;strWho = strWho.trim();&#10;&#9;&#9;&#9;&#9;&#9;if (strWho.length()&gt;0){strWho = &quot; [&quot; + strWho + &quot;]&quot;;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;ByWhen += &quot;\t&lt;li&gt;&quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;(done?&quot;&lt;strike&gt;&quot;:&quot;&quot;) +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&quot;&lt;a href='&quot; + it['nodeID'] + &quot;'&gt;&quot; + it['action'] + &quot;&lt;/a&gt;&quot; + (strContext==null ? &quot;&quot;:&quot; @&quot; + strContext + &quot; &quot;) + &quot; (for: &quot; + strProject + &quot;)&quot; + strWho +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;(done?&quot;&lt;/strike&gt;&quot;:&quot;&quot;) +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&quot;&lt;/li&gt;\n&quot;;&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;ByWhen += &quot;&lt;/ul&gt;\n&quot;;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;if (ByWhen == htmlBodyStyle) {&#10;&#9;&#9;&#9;ByWhen += &quot;&lt;h1 style='color:#666666;'&gt;No Due Dates for Next Actions Found On This Map&lt;/h1&gt;&lt;p&gt;Use ALT-F9 to add a 'When' attribute to a Next Action node&lt;/p&gt;&quot;;&#10;&#9;&#9;}&#10;&#9;&#9;ByWhen += &quot;&lt;/body&gt;&lt;/html&gt;&quot;;&#10;&#9;&#9;return ByWhen;&#10;&#9;}&#10;&#10;&#9;private def sortDateWhen(def naByWhen){&#10;&#9;&#9;def newByWhen = [:];&#10;&#10;&#9;&#9;// Today goes first, followed by This Week&#10;&#9;&#9;if(naByWhen.containsKey('Today')){newByWhen['Today'] = naByWhen['Today'];}&#10;&#9;&#9;if(naByWhen.containsKey('This Week')){newByWhen['This Week'] = naByWhen['This Week'];}&#10;&#10;&#9;&#9;// Now add any other dates&#10;&#9;&#9;naByWhen.each {&#10;&#9;&#9;&#9;key, value -&gt; String strWhen = key;&#10;&#9;&#9;&#9;if(strWhen!=&quot;Today&quot; &amp;&amp; strWhen!=&quot;This Week&quot;){&#10;&#9;&#9;&#9;&#9;newByWhen[strWhen] = naByWhen[strWhen];&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return newByWhen;&#10;&#9;}&#10;&#10;&#9;//--------------------------------------------------------------&#10;&#9;//Get icon key names from Settings/Icons nodes&#10;&#9;private String findIconKey(Proxy.Node thisNode, String nodeLabel, String iconLast){&#10;&#9;&#9;def icons = thisNode.icons.icons;&#10;&#9;&#9;String nodeText = thisNode.text;&#10;&#9;&#9;String iconFound = iconLast;&#10;&#10;&#9;&#9;if (nodeText.trim() == nodeLabel){&#10;&#9;&#9;&#9;iconFound = icons[0];&#10;&#9;&#9;}&#10;&#10;&#9;&#9;thisNode.children.each {&#10;&#9;&#9;&#9;iconFound = findIconKey(it, nodeLabel, iconFound);&#10;&#9;&#9;}&#10;&#9;&#9;return iconFound;&#10;&#9;}&#10;&#10;&#9;//--------------------------------------------------------------&#10;&#9;// recursive walk through nodes to find Projects&#10;&#9;private def findProjects(Proxy.Node thisNode, String iconProject){&#10;&#9;&#9;def icon = thisNode.icons.icons;&#10;&#9;&#9;def result = [];&#10;&#10;&#9;&#9;// include result if it has project icon and its not the icon setting node for projects&#10;&#9;&#9;if (icon[0] == iconProject){&#10;&#9;&#9;&#9;if (!(thisNode.text =~ /Icon:/)){&#10;&#9;&#9;&#9;&#9;result = [thisNode];&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;thisNode.children.each {&#10;&#9;&#9;&#9;result += findProjects(it, iconProject);&#10;&#9;&#9;}&#10;&#9;&#9;return result;&#10;&#9;}&#10;&#10;&#9;//--------------------------------------------------------------&#10;&#9;// find parent for the next action, either direct (task) or indirect (project)&#10;&#9;private def findNextActionProject(Proxy.Node thisNode, listProjects){&#10;&#9;&#9;Proxy.Node parentNode = thisNode.getParent();&#10;&#9;&#9;def naProject = parentNode.text;&#10;&#10;&#9;&#9;listProjects.each {&#10;&#9;&#9;&#9;if (it!=null &amp;&amp; thisNode.isDescendantOf(it)){&#10;&#9;&#9;&#9;&#9;naProject = it.text;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;return naProject;&#10;&#9;}&#10;&#10;&#9;//--------------------------------------------------------------&#10;&#9;// recursive walk through nodes to find Next Actions&#10;&#9;private def findNextActions(Proxy.Node thisNode, listProjects, String iconNextAction, String iconToday, String iconDone){&#10;&#9;&#9;def icons = thisNode.icons.icons;&#10;&#9;&#9;def naAction = thisNode.text;&#10;&#9;&#9;def naNodeID = thisNode.nodeID;&#10;&#9;&#9;boolean foundIconNextAction = false;&#10;&#9;&#9;boolean foundIconToday = false;&#10;&#9;&#9;boolean foundIconDone = false;&#10;&#10;&#9;&#9;// use index method to get attributes&#10;&#9;&#9;String naContext = thisNode['Where'].toString();&#10;&#9;&#9;String naWho = thisNode['Who'].toString();&#10;&#9;&#9;String naWhen = thisNode['When'].toString();&#10;&#10;&#9;&#9;// take care of missing attributes. null or empty string evaluates as boolean false&#10;&#9;&#9;if (!naWho) {naWho = &quot;tbd&quot;;}&#10;&#9;&#9;if (!naWhen) {naWhen = &quot;This Week&quot;;}&#10;&#9;&#9;else { &#10;&#9;&#9;&#9;SimpleDateFormat fmt = determineDateFormat(naWhen);&#10;&#9;&#9;&#9;if (fmt!=null) {&#10;&#9;&#9;&#9;&#9;naWhen = fmt.parse(naWhen).format(&quot;yyyy-MM-dd&quot;); &#10;&#9;&#9;&#9;&#9;//TODO: write back value&#10;&#9;&#9;&#9;&#9;//thisNode['When'] = naWhen;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;def result = [];&#10;&#10;&#9;&#9;icons.each {&#10;&#9;&#9;&#9;// check for Next Action icon&#10;&#9;&#9;&#9;if (it == iconNextAction){&#10;&#9;&#9;&#9;&#9;foundIconNextAction = true;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;// check for Today icon&#10;&#9;&#9;&#9;if (it == iconToday){&#10;&#9;&#9;&#9;&#9;foundIconToday = true;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;// check for Done icon&#10;&#9;&#9;&#9;if (it == iconDone){&#10;&#9;&#9;&#9;&#9;foundIconDone = true;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// include result if it has next action icon and its not the icon setting node for next actions&#10;&#9;&#9;if (foundIconNextAction){&#10;&#9;&#9;&#9;if (!(naAction =~ /Icon:/)){&#10;&#9;&#9;&#9;&#9;def naProject = findNextActionProject(thisNode, listProjects);&#10;&#9;&#9;&#9;&#9;if (foundIconToday){naWhen = &quot;Today&quot;;}&#10;&#9;&#9;&#9;&#9;if (!(foundIconDone &amp;&amp; filterDone)) {&#10;&#9;&#9;&#9;&#9;&#9;result = [action:naAction, project:naProject, context:naContext, who:naWho, when:naWhen, nodeID:naNodeID, done:foundIconDone];&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;thisNode.children.each {&#10;&#10;&#9;&#9;result += findNextActions(it, listProjects, iconNextAction, iconToday, iconDone);&#10;&#9;&#9;}&#10;&#9;&#9;return result;&#10;&#9;}&#10;&#10;&#9;//--------------------------------------------------------------&#10;&#9;// Convert next action shorthand notation with recursive walk:&#10;&#9;// shorthand: *&lt;next action&gt; @&lt;Context&gt; [&lt;who&gt;] {&lt;when&gt;}&#10;&#9;// becomes:&#10;&#9;// node.text     = &lt;next action&gt;&#10;&#9;// node['Where'] = &lt;where&gt;&#10;&#9;// node['Who']   = &lt;who&gt;&#10;&#9;// node['When']  = &lt;when&gt;&#10;&#9;//&#10;&#9;public void ConvertShorthand(Proxy.Node thisNode){&#10;&#9;&#9;String nodeText = thisNode.text.trim();&#10;&#9;&#9;String[] field;&#10;&#10;&#9;&#9;if (nodeText.length()&gt;0 &amp;&amp; nodeText.charAt(0) == &quot;*&quot;){&#10;&#9;&#9;&#9;field = parseShorthand(nodeText);&#10;&#9;&#9;&#9;thisNode.text = field[0];&#10;&#9;&#9;&#9;def nodeAttr = [:];&#10;&#9;&#9;&#9;if (field[1]){nodeAttr[&quot;Where&quot;]=field[1];}&#10;&#9;&#9;&#9;if (field[2]){nodeAttr[&quot;Who&quot;]=field[2];}&#10;&#9;&#9;&#9;if (field[3]){nodeAttr[&quot;When&quot;]=field[3];}&#10;&#9;&#9;&#9;thisNode.attributes = nodeAttr;&#10;&#9;&#9;&#9;thisNode.icons.add(IconNextAction);&#10;&#9;&#9;}&#10;&#10;&#9;&#9;thisNode.children.each {&#10;&#9;&#9;&#9;ConvertShorthand(it);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;//--------------------------------------------------------------&#10;&#9;// Parse next action shorthand notation&#10;&#9;// field[0] = &lt;next action&gt;&#10;&#9;// field[1] = &lt;where&gt;&#10;&#9;// field[2] = &lt;who&gt;&#10;&#9;// field[3] = &lt;when&gt;&#10;&#9;//&#10;&#9;private String[] parseShorthand(String nodeText){&#10;&#9;&#9;String[] field&#10;&#9;&#9;int posWho1 = nodeText.indexOf(&quot;[&quot;);&#10;&#9;&#9;int posWho2 = nodeText.indexOf(&quot;]&quot;);&#10;&#9;&#9;int posWhen1 = nodeText.indexOf(&quot;{&quot;);&#10;&#9;&#9;int posWhen2 = nodeText.indexOf(&quot;}&quot;);&#10;&#9;&#9;int posContext = nodeText.indexOf(&quot;@&quot;);&#10;&#9;&#9;int posFirst;&#10;&#9;&#9;int posMax;&#10;&#10;&#9;&#9;field = new String[4];&#10;&#10;&#9;&#9;// parse When&#10;&#9;&#9;if ((posWhen1&gt;0)&amp;&amp;(posWhen2&gt;0)){&#10;&#9;&#9;&#9;field[3] = nodeText.substring(posWhen1+1, posWhen2);&#10;&#9;&#9;&#9;field[3] = field[3].trim();&#10;&#9;&#9;&#9;SimpleDateFormat fmt = determineDateFormat(field[3]);&#10;&#9;&#9;&#9;if (fmt!=null) {&#10;&#9;&#9;&#9;&#9;field[3]=fmt.parse(field[3]).format(&quot;yyyy-MM-dd&quot;);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// parse Who&#10;&#9;&#9;if ((posWho1&gt;0)&amp;&amp;(posWho2&gt;0)){&#10;&#9;&#9;&#9;field[2] = nodeText.substring(posWho1+1, posWho2);&#10;&#9;&#9;&#9;field[2] = field[2].trim();&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// parse Action&#10;&#9;&#9;posMax = nodeText.length();&#10;&#9;&#9;if (posWhen1==-1){posWhen1 = posMax;}&#10;&#9;&#9;if (posWho1==-1){posWho1 = posMax;}&#10;&#9;&#9;if (posContext==-1){posContext = posMax;}&#10;&#9;&#9;posFirst = Math.min(posWhen1, posWho1);&#10;&#9;&#9;posFirst = Math.min(posFirst, posContext);&#10;&#9;&#9;field[0] = nodeText.substring(1,posFirst);&#10;&#9;&#9;field[0] = field[0].trim();&#10;&#10;&#9;&#9;// parse Context&#10;&#9;&#9;posContext = nodeText.indexOf(&quot;@&quot;);&#10;&#9;&#9;if (posContext&gt;0){&#10;&#9;&#9;&#9;nodeText = nodeText.substring(posContext);&#10;&#9;&#9;&#9;posWho1 = nodeText.indexOf(&quot;[&quot;);&#10;&#9;&#9;&#9;posWhen1 = nodeText.indexOf(&quot;{&quot;);&#10;&#9;&#9;&#9;posMax = nodeText.length();&#10;&#9;&#9;&#9;if (posWho1==-1){posWho1 = posMax;}&#10;&#9;&#9;&#9;if (posWhen1==-1){posWhen1 = posMax;}&#10;&#9;&#9;&#9;posFirst = Math.min(posWhen1, posWho1);&#10;&#9;&#9;&#9;field[1] = nodeText.substring(1,posFirst);&#10;&#9;&#9;&#9;field[1] = field[1].trim();&#10;&#9;&#9;}&#10;&#9;&#9;return field;&#10;&#9;}&#10;&#10;&#9;private static final def DATE_FORMAT_REGEXPS = [&#10;&#9;&#9;'^\\d{4}-\\d{1,2}-\\d{1,2}t\\d{1,2}:\\d{2}\\+\\d{4}$':  new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mmZ&quot;),&#10;&#9;&#9;'^\\d{4}-\\d{1,2}-\\d{1,2}t\\d{1,2}:\\d{2}:\\d{2}\\+\\d{4}$':  new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ssZ&quot;),&#10;&#9;&#9;'^\\d{8}$': new SimpleDateFormat(&quot;yyyyMMdd&quot;),&#10;&#9;&#9;'^\\d{1,2}-\\d{1,2}-\\d{4}$':  new SimpleDateFormat(&quot;dd-MM-yyyy&quot;),&#10;&#9;&#9;'^\\d{4}-\\d{1,2}-\\d{1,2}$':  new SimpleDateFormat(&quot;yyyy-MM-dd&quot;),&#10;&#9;&#9;'^\\d{1,2}/\\d{1,2}/\\d{4}$':  new SimpleDateFormat(&quot;MM/dd/yyyy&quot;),&#10;&#9;&#9;'^\\d{4}/\\d{1,2}/\\d{1,2}$':  new SimpleDateFormat(&quot;yyyy/MM/dd&quot;),&#10;&#9;&#9;'^\\d{4}\\.\\d{1,2}\\.\\d{1,2}$':  new SimpleDateFormat(&quot;yyyy.MM.dd&quot;),&#10;&#9;&#9;'^\\d{4}\\.\\d{1,2}\\.\\d{1,2}\\.$':  new SimpleDateFormat(&quot;yyyy.MM.dd.&quot;),&#10;&#9;&#9;'^\\d{1,2}\\s[a-z]{3}\\s\\d{4}$':  new SimpleDateFormat(&quot;dd MMM yyyy&quot;),&#10;&#9;&#9;'^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}$':  new SimpleDateFormat(&quot;dd MMMM yyyy&quot;),&#10;&#9;&#9;'^\\d{12}$':  new SimpleDateFormat(&quot;yyyyMMddHHmm&quot;),&#10;&#9;&#9;'^\\d{8}\\s\\d{4}$':  new SimpleDateFormat(&quot;yyyyMMdd HHmm&quot;),&#10;&#9;&#9;'^\\d{1,2}-\\d{1,2}-\\d{4}\\s\\d{1,2}:\\d{2}$':  new SimpleDateFormat(&quot;dd-MM-yyyy HH:mm&quot;),&#10;&#9;&#9;'^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{2}$':  new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;),&#10;&#9;&#9;'^\\d{1,2}/\\d{1,2}/\\d{4}\\s\\d{1,2}:\\d{2}$':  new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm&quot;),&#10;&#9;&#9;'^\\d{4}/\\d{1,2}/\\d{1,2}\\s\\d{1,2}:\\d{2}$':  new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm&quot;),&#10;&#9;&#9;'^\\d{1,2}\\s[a-z]{3}\\s\\d{4}\\s\\d{1,2}:\\d{2}$':  new SimpleDateFormat(&quot;dd MMM yyyy HH:mm&quot;),&#10;&#9;&#9;'^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}\\s\\d{1,2}:\\d{2}$':  new SimpleDateFormat(&quot;dd MMMM yyyy HH:mm&quot;),&#10;&#9;&#9;'^\\d{14}$':  new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;),&#10;&#9;&#9;'^\\d{8}\\s\\d{6}$':  new SimpleDateFormat(&quot;yyyyMMdd HHmmss&quot;),&#10;&#9;&#9;'^\\d{1,2}-\\d{1,2}-\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$':  new SimpleDateFormat(&quot;dd-MM-yyyy HH:mm:ss&quot;),&#10;&#9;&#9;'^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2}$':  new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;),&#10;&#9;&#9;'^\\d{1,2}/\\d{1,2}/\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$':  new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;),&#10;&#9;&#9;'^\\d{4}/\\d{1,2}/\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2}$':  new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;),&#10;&#9;&#9;'^\\d{1,2}\\s[a-z]{3}\\s\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$':  new SimpleDateFormat(&quot;dd MMM yyyy HH:mm:ss&quot;),&#10;&#9;&#9;'^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$':  new SimpleDateFormat(&quot;dd MMMM yyyy HH:mm:ss&quot;),&#10;&#9;];&#10;&#9;/**&#10;&#9;* Determine SimpleDateFormat pattern matching with the given date string. Returns null if&#10;&#9;* format is unknown. You can simply extend DateUtil with more formats if needed.&#10;&#9;* @param dateString The date string to determine the SimpleDateFormat pattern for.&#10;&#9;* @return The matching SimpleDateFormat pattern, or null if format is unknown.&#10;&#9;* @see SimpleDateFormat&#10;&#9;*/&#10;&#9;public static SimpleDateFormat determineDateFormat(String dateString) {&#10;&#9;&#9;for (key in DATE_FORMAT_REGEXPS.keySet()) {&#10;&#9;&#9;&#9;if (dateString.toLowerCase().matches(key)) {&#10;&#9;&#9;&#9;&#9;return DATE_FORMAT_REGEXPS[key];&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;return null; // Unknown format.&#10;&#9;}&#10;&#9;//--------------------------------------------------------------&#10;&#9;// parse the GTD mind map&#10;&#9;public void ParseMap(){&#10;&#9;&#9;// Get icon keys for next actions and projects&#10;&#9;&#9;IconNextAction = getNextActionIcon();&#10;&#9;&#9;IconProject = getProjectIcon();&#10;&#9;&#9;IconToday = getTodayIcon();&#10;&#9;&#9;IconDone = getDoneIcon();&#10;&#10;&#9;&#9;// Expand any nodes with next action shorthand&#10;&#9;&#9;ConvertShorthand(RootNode);&#10;&#10;&#9;&#9;// Get project and next action lists&#10;&#9;&#9;ProjectList = getProjectList();&#10;&#9;&#9;NAList = getNAList();&#10;&#10;&#9;&#9;// Get HTML for next action lists&#10;&#9;&#9;ByProject = getHTMLByProject();&#10;&#9;&#9;ByContext = getHTMLByContext();&#10;&#9;&#9;ByWho = getHTMLByWho();&#10;&#9;&#9;ByWhen = getHTMLByWhen();&#10;&#9;}&#10;&#10;}&#10;&#10;//---------------------------------------------------------&#10;// Refresh the GUI window&#10;//---------------------------------------------------------&#10;public class RefreshUIWindow implements ActionListener {&#10;&#9;private GTDReport report;&#9;&#10;&#10;&#9;public void actionPerformed(ActionEvent e) {&#10;&#9;&#9;report.Refresh();&#10;&#9;}&#10;&#10;&#9;public RefreshUIWindow(GTDReport gtdReport) {&#10;&#9;&#9;report = gtdReport;&#10;&#9;}&#10;}&#10;&#10;//---------------------------------------------------------&#10;// Prints the GUI window&#10;//---------------------------------------------------------&#10;public class PrintUIWindow implements ActionListener {&#10;&#9;GTDReport reportToPrint;&#10;&#9;int reportNum = 0;&#10;&#9;String strReport = &quot;&quot;;&#10;&#10;&#9;public void actionPerformed(ActionEvent e) {&#10;&#9;&#9;// get currently selected tab&#10;&#9;&#9;reportNum = reportToPrint.TabIndex();&#10;&#10;&#9;&#9;// get report&#10;&#9;&#9;switch (reportNum) {&#10;&#9;&#9;&#9;case 0: strReport = reportToPrint.ProjectReport(); break;&#10;&#9;&#9;&#9;case 1: strReport = reportToPrint.OwnerReport(); break;&#10;&#9;&#9;&#9;case 2: strReport = reportToPrint.ContextReport(); break;&#10;&#9;&#9;&#9;case 3: strReport = reportToPrint.DueReport(); break;&#10;&#9;&#9;&#9;default: strReport = &quot;(no report)&quot;; break;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;JEditorPane panePrint = new JEditorPane(&quot;text/html&quot;, strReport);&#10;&#9;&#9;JTextComponent txtPrint = panePrint;&#10;&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;boolean complete = txtPrint.print();&#10;&#9;&#9;&#9;if (complete) {&#10;&#9;&#9;&#9;&#9;// show a success message&#10;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;// show a message indicating that printing was cancelled&#10;&#9;&#9;&#9;}&#10;&#9;&#9;} catch (PrinterException pe) {&#10;&#9;&#9;&#9;// Printing failed, report to the user  &#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public PrintUIWindow(GTDReport gtdReport) {&#10;&#9;&#9;reportToPrint = gtdReport;      &#10;&#9;}&#10;}&#10;&#10;//---------------------------------------------------------&#10;// Close the GUI window&#10;//---------------------------------------------------------&#10;public class CloseUIWindow implements ActionListener {&#10;   JFrame frameToClose;&#10;  &#10;   public void actionPerformed(ActionEvent e) {&#10;   frameToClose.setVisible(false);&#10;   frameToClose.dispose();&#10;   }&#10;&#10;   public CloseUIWindow(JFrame f) {&#10;   frameToClose = f;&#10;   }&#10;}&#10;&#10;//---------------------------------------------------------&#10;// Copy the GUI window&#10;//---------------------------------------------------------&#10;public class CopyUIWindow implements ActionListener {&#10;&#9;GTDReport reportToCopy;&#10;&#9;int reportNum = 0;&#10;&#9;String strReport = &quot;&quot;;&#10;  &#10;&#9;public void actionPerformed(ActionEvent e) {    &#10;&#9;&#9;// get currently selected tab&#10;&#9;&#9;reportNum = reportToCopy.TabIndex();&#10;&#10;&#9;&#9;// get report&#10;&#9;&#9;switch (reportNum) {&#10;&#9;&#9;&#9;case 0: strReport = reportToCopy.ProjectReport(); break;&#10;&#9;&#9;&#9;case 1: strReport = reportToCopy.OwnerReport(); break;&#10;&#9;&#9;&#9;case 2: strReport = reportToCopy.ContextReport(); break;   &#10;&#9;&#9;&#9;case 3: strReport = reportToCopy.DueReport(); break;&#10;&#9;&#9;&#9;default: strReport = &quot;(no report)&quot;; break;&#10;&#9;&#9;}&#10;&#9;  &#10;&#9;&#9;// copy to system clipboard as plain text&#10;&#9;&#9;strReport = strReport.replaceAll(&quot;\\&lt;.*?&gt;&quot;,&quot;&quot;);&#10;&#9;&#9;StringSelection ss = new StringSelection(strReport);&#10;&#9;&#9;Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);&#10;   }&#10;&#10;&#9;public CopyUIWindow(GTDReport gtdReport) {&#10;&#9;&#9;reportToCopy = gtdReport;   &#10;&#9;}&#10;}&#10;&#10;&#10;//---------------------------------------------------------&#10;// Process hyperlink to map node&#10;//---------------------------------------------------------&#10;public class NodeLink implements HyperlinkListener {&#10;&#10;&#9;GTDReport report;&#10;&#9;Proxy.Controller ctrl;&#10;&#10;&#9;public void hyperlinkUpdate(HyperlinkEvent e){&#10;&#9;&#9;if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED){&#10;&#9;&#9;&#9;String linkNodeID = e.getDescription();&#10;&#9;&#9;&#9;def nodesFound = ctrl.find{ it.nodeID == linkNodeID};&#10;&#9;&#9;&#9;if (nodesFound[0] != null){&#10;&#9;&#9;&#9;&#9;FoldToTop(nodesFound[0]);&#10;&#9;&#9;&#9;&#9;UnfoldBranch(nodesFound[0]);&#10;&#9;&#9;&#9;&#9;ctrl.centerOnNode(nodesFound[0]);&#10;&#9;&#9;&#9;&#9;ctrl.select(nodesFound[0]);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;else {&#10;&#9;&#9;&#9;&#9;UITools.informationMessage(&quot;Next Action not found in mind map. Refresh Next Action list&quot;);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// recursive unfolding of branch&#10;&#9;private void UnfoldBranch(Proxy.Node thisNode){&#10;&#9;&#9;Proxy.Node rootNode = thisNode.getMap().getRoot();&#10;&#9;&#9;if (thisNode != rootNode){&#10;&#9;&#9;&#9;thisNode.setFolded(false);&#10;&#9;&#9;&#9;UnfoldBranch(thisNode.getParent());&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// fold to first level&#10;&#9;private void FoldToTop(Proxy.Node thisNode){&#10;&#9;Proxy.Node rootNode = thisNode.getMap().getRoot();&#10;&#9;&#9;def Nodes = ctrl.findAll();&#10;&#9;&#9;Nodes.each {&#10;&#9;&#9;&#9;it.setFolded(true);&#10;&#9;&#9;}&#10;&#9;&#9;rootNode.setFolded(false);&#10;&#9;}&#10;&#10;&#10;&#9;public NodeLink(GTDReport gtdReport){&#10;&#9;&#9;report = gtdReport;&#10;&#9;&#9;ctrl = report.getController();&#10;&#9;}&#10;}&#10;&#10;&#10;//=========================================================&#10;// script&#10;//=========================================================&#10;&#10;// Select root node of map&#10;Proxy.Node rootNode = node.map.root;&#10;c.select(rootNode);&#10;&#10;// create a GTDMapReader&#10;GTDMapReader gtdMapReader = new GTDMapReader(rootNode);&#10;&#10;// generate report GUI&#10;GTDReport report = new GTDReport();&#10;report.setUserPath(c.userDirectory.toString());&#10;report.setController(c);&#10;report.setMapReader(gtdMapReader);&#10;report.Show();" ID="ID_1306580101" CREATED="1330901147445" MODIFIED="1412441442926"/>
</node>
</node>
<node TEXT="zips" POSITION="right" ID="ID_1927628745" CREATED="1323057303835" MODIFIED="1330899611289" HGAP="90" VSHIFT="-30">
<edge COLOR="#999999" WIDTH="3"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#xA0;- The immediate child nodes contain a description of the zip. The devtools script releaseAddOn.groovy allows automatic zip creation if the name of this node matches a directory in the current directory.
    </p>
    <p>
      
    </p>
    <p>
      &#xA0;- The child nodes of these nodes contain the actual zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#xA0;- Any zip file will be extracted in the &lt;installationbase&gt;. Currently, &lt;installationbase&gt; is always Freeplane's &lt;userhome&gt;, e.g. ~/.freeplane/1.2.
    </p>
    <p>
      
    </p>
    <p>
      &#xA0;- The files will be processed in the sequence as seen in the map.
    </p>
    <p>
      
    </p>
    <p>
      &#xA0;- Zip files must be uploaded into the map via the script <i>Tools-&gt;Scripts-&gt;Insert Binary</i>&#xA0;since they have to be (base64) encoded as simple strings.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="icons" ID="ID_1422580718" CREATED="1323094256288" MODIFIED="1323172344804" VSHIFT="-20">
<node TEXT="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" ID="ID_579757717" CREATED="1323094846117" MODIFIED="1330901147586"/>
</node>
</node>
<node TEXT="images" POSITION="right" ID="ID_907142452" CREATED="1323172874273" MODIFIED="1330899611304" HGAP="90" VSHIFT="-120"><richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may define any number of images as child nodes of the images node. The actual image data has to be placed as base64 encoded binary data into the text of a subnode.
    </p>
    <p>
      The images are saved to the <i>${installationbase}/resources/images</i>&#xA0;directory.
    </p>
    <p>
      
    </p>
    <p>
      The following images should be present:
    </p>
    <ul>
      <li>
        <i>${name}.png</i>, like <i>oldicons-theme.png</i>. This will be used in the app-on details dialog.
      </li>
      <li>
        <i>${name}-icon.png</i>, like <i>oldicons-theme-icon.png</i>. This will be used in the app-on overview.
      </li>
    </ul>
    <p>
      Images can be added automatically by releaseAddOn.groovy or must be uploaded into the map via the script <i>Tools-&gt;Scripts-&gt;Insert Binary</i>&#xA0;since they have to be (base64) encoded as simple strings.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="${name}.png" ID="ID_1928924406" CREATED="1323059848070" MODIFIED="1323063753585">
<edge COLOR="#999999"/>
<node TEXT="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&#10;iAnBAABAAGNwSXDQzxHgobEa4QAAAAAAAAAAAAAAAAAAAAA+AAMA/v8JAAYAAAAAAAAAAAAAAA&#10;EAAAABAAAAAAAAAAAQAAACAAAAAQAAAP7///8AAAAAAAAAAP//////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;////////////////////////////////3///8EAAAA/v///xcAAAAZAAAABgAAAAcAAAAIAAAA&#10;CQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAABAAAAARAAAAEgAAABMAAAAUAAAAFQAAABYAAA&#10;D+////GAAAABoAAAD+////GwAAABwAAAAdAAAAHgAAAP7/////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;////////////////////////////////////////////////UgBvAG8AdAAgAEUAbgB0AHIAeQ&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYABQD/////////&#10;/wEAAAB+fz+1pfaGQ6GhowIk0ojvAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAgA8AAAAAAABEAG&#10;EAdABhAFMAdABvAHIAZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAFAABAQkAAAD/////AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcHIc6YKyzAFwVCHpgr&#10;LMAQAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAIB////////////////AAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJkAAAAAAAAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAgECAAAABQAAAP////&#10;8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAABAAAAAAAAAABAAAAAgAA&#10;AP7////+/////v////7///8HAAAACAAAAAkAAAAKAAAACwAAAAwAAAANAAAADgAAAA8AAAAQAA&#10;AAEQAAAP7///8TAAAA/v///xUAAAAWAAAAFwAAABgAAAAZAAAAGgAAABsAAAAcAAAAHQAAAB4A&#10;AAAfAAAAIAAAACEAAAAiAAAAIwAAACQAAAAlAAAAJgAAACcAAAAoAAAAKQAAACoAAAArAAAALA&#10;AAAC0AAAAuAAAALwAAADAAAAAxAAAAMgAAADMAAAA0AAAANQAAADYAAAA3AAAAOAAAADkAAAA6&#10;AAAAOwAAAP7///89AAAA/v////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;///////wEAAAAAACgwIFBUWVAgNw0KMCBPVVRWIDgNCjAgUEFGVCAyDQowIFRITVMNCg0KGwDy&#10;BAAAAAIAAAAcAPIEAAAAAQAAAB8ABAIAAAAgAASY9hZCIQAEAQAAACIACAAAAEMAAPpCIwAqRg&#10;ByAGUAZQBwAGwAYQBuAGUARwBUAEQAXwBsAG8AZwBvAF8AMQAyADgAJQAEAAAQQQAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAGgAIHjF0Q/h3bkMb&#10;APIEAAAABgAAABwAEAAAAAAAAAAAAAAAAAAAAAAeAAEAAAAAAAAAAAAAAAAAAAAABQAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AACAAAABAAAAGgDw4QIAAAAAAAD/2P/gABBKRklGAAEBAQBIAEgAAP/hAFhFeGlmAABJSSoACA&#10;AAAAQAMQECABEAAAA+AAAAEFEBAAEAAAABLNQAEVEEAAEAAACjEgAAElEEAAEAAACjEgAAAAAA&#10;AHd3dy5pbmtzY2FwZS5vcmcAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAgH///////////////8AAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAMQAAAAAAAAAzAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAQAAAAHAAAA&#10;/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAEAAAAAAAAADQAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAEAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AABQAAAIoiAAAAAAAANQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAgEGAAAACAAAAP////8AAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAGAAAA8AIAAAAAAAAAgAAAAQAAABoA8HsiAAACAAAAfQAAAIAA&#10;AACY9hZCmPYWQoUcAAD/2P/gABBKRklGAAEBAQAmACYAAP/bAEMAAgEBAgEBAgICAgICAgIDBQ&#10;MDAwMDBgQEAwUHBgcHBwYHBwgJCwkICAoIBwcKDQoKCwwMDAwHCQ4PDQwOCwwMDP/bAEMBAgIC&#10;AwMDBgMDBgwIBwgMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA&#10;wMDAwMDP/AABEIAH0AgAMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJ&#10;Cgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8C&#10;QzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5&#10;eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4e&#10;Lj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1&#10;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&#10;MjIyMjIy/8AAEQgAAQABAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCA&#10;kKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHw&#10;JDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eH&#10;l6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh&#10;4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EAL&#10;URAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoW&#10;JDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhI&#10;WGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm&#10;5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A+f6KKKAP/9kDAAAAq2vbTgAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAhAAADoA8gQAAAAEAAAAOwDyBAAAAAUAAAAaABgAAIA/AAAAAAAAAAAAAIA/AAAA&#10;AAAAAAAbAPIEAAAAAwAAABwABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDSE5LSU5LIAQABwAMAAADAAIAAAAKAAD4AQwA////&#10;/xgAVEVYVAAAAQAAAFRFWFQAAgAAAgAAABgARkRQUAAAAQAAAEZEUFAABAAAAAIAABgARkRQQw&#10;AAAQAAAEZEUEMABgAAAAIAABgAU1RTSAAAAQAAAFNUU0gACAAAHgAAABgAU1RTSAEAAQAAAFNU&#10;U0geCAAARgAAABgAU1lJRAAAAQAAAFNZSURkCAAADAAAABgAU0dQIAAAAQAAAFNHUCBwCAAABA&#10;AAABgASU5LIAAAAQAAAElOSyB0CAAABAAAABgAQlRFUAAAAQAAAFBMQyB4CAAAGAAAABgAQlRF&#10;QwAANgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAQAAgD///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAASAAAARwAAAAAAAABUAGUAeAB0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgABAP//////////CgAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAcFQh6YKyzAFAhS/pgrLMAQAAAAAAAAAAAAAAAEMATwBOAFQARQBOAFQAUwAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAIBCwAAAP//&#10;////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAKAAAAAAAAAQ&#10;BDAG8AbQBwAE8AYgBqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAABIAAgD///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAA8AAAAVgAAAAAAAAABAAAAUExDIJAIAAAYAAAAGABGT05UAAABAAAARk9OVKgIAAA8AAAA&#10;GABTVFJTAAABAAAAUExDIOQIAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQAAAAEA&#10;AABAB20CBAAAAAAAAAAEAAAAAAD/////MgAAAAIAAABAB20CAAAAAAAAAAAIAAAAKgAAABAAHg&#10;AAAAwi8PkGACkaBwAqGgcALiIAAAAAMCKZmZkAAAADAAQAAAAMIgIAAAABAAAAAgAAAAQAAAB2&#10;AHYAAQAAAAQAAAAAAAAAAAAAAAICAAAABAAAAQAAAAQAAAAAAAAAAAAAAAICAAAABgAAKAAAAA&#10;EAAABAB20CBAAAAAAAAAAEAAAADwBUAGkAbQBlAHMAIABOAGUAdwAgAFIAbwBtAGEAbgAAAAEC&#10;AQAAAAggiIJBAAACgAAAAEAAAA4B20CBAAAAAAAAAAEAAAA&#10;AAD/////MgAAAAIAAAA4B20CAAAAAAAAAAAIAAAAKgAAABAAHgAAAAwi8PkGACkaBwAqGgcALi&#10;IAAAAAMCKZmZkAAAADAAQAAAAMIgIAAAABAAAAAgAAAAQAAAB2AHYAAQAAAAQAAAAAAAAAAAAA&#10;AAICAAAABAAAAQAAAAQAAAAAAAAAAAAAAAICAAAABgAAKAAAAAEAAAA4B20CBAAAAAAAAAAEAA&#10;AADwBUAGkAbQBlAHMAIABOAGUAdwAgAFIAbwBtAGEAbgAAAAECAQAAAAgAAAD/AAAAAQAAAAAA&#10;AAAKAAAAACIFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAP7/AwoAAP////&#10;8AAAAAAAAAAAAAAAAAAAAAGgAAAFF1aWxsOTYgU3RvcnkgR3JvdXAgQ2xhc3MA/////wEAAAAA&#10;AAAA9DmycQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3YhSrgAAAB9pVFh0VGl0bGUAAAAAAEZyZWVwbGFuZUdU&#10;RF9sb2dvXzEyODMnn8AAAAAbdEVYdFRpdGxlAEZyZWVwbGFuZUdURF9sb2dvXzEyOH9jaiAAAA&#10;DwbWVUYf/+PAA/AHgAbQBsACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADAAIgAgAGUAbgBjAG8A&#10;ZABpAG4AZwA9ACIAVQBUAEYALQAxADYAIgA/AD4ADQAKADwAbQBlAHQAYQA+ADwAYwBvAG0AbQ&#10;BvAG4APgA8AGEAYwB0AHUAYQBsAF8AaQBtAGEAZwBlAF8AcwBpAHoAZQA+ADEAMgA4AC8AMQAy&#10;ADUAPAAvAGEAYwB0AHUAYQBsAF8AaQBtAGEAZwBlAF8AcwBpAHoAZQA+ADwALwBjAG8AbQBtAG&#10;8AbgA+ADwALwBtAGUAdABhAD4ADQAKADBtVEgAAAAASUVORK5CYII=" ID="ID_763459242" CREATED="1330901147601" MODIFIED="1330901147617"/>
</node>
<node TEXT="${name}-icon.png" ID="ID_1819207796" CREATED="1323059863835" MODIFIED="1323063753585">
<edge COLOR="#999999"/>
<node TEXT="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&#10;B5x/4NoAAAAASUVORK5CYII=" ID="ID_1348894474" CREATED="1330901147632" MODIFIED="1330901147632"/>
</node>
<node TEXT="fpgtdLogo.png" ID="ID_1897993304" CREATED="1323059879726" MODIFIED="1323063753585">
<edge COLOR="#999999"/>
<node TEXT="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&#10;AAAAOwAAAP7///89AAAA/v////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;//////////////////////////////////////////////////////////////////////////&#10;///////wEAAAAAACgwIFBUWVAgNw0KMCBPVVRWIDgNCjAgUEFGVCAyDQowIFRITVMNCg0KGwDy&#10;BAAAAAIAAAAcAPIEAAAAAQAAAB8ABAIAAAAgAASY9hZCIQAEAQAAACIACAAAAEMAAPpCIwAqRg&#10;ByAGUAZQBwAGwAYQBuAGUARwBUAEQAXwBsAG8AZwBvAF8AMQAyADgAJQAEAAAQQQAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAGgAIHjF0Q/h3bkMb&#10;APIEAAAABgAAABwAEAAAAAAAAAAAAAAAAAAAAAAeAAEAAAAAAAAAAAAAAAAAAAAABQAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AACAAAABAAAAGgDw4QIAAAAAAAD/2P/gABBKRklGAAEBAQBIAEgAAP/hAFhFeGlmAABJSSoACA&#10;AAAAQAMQECABEAAAA+AAAAEFEBAAEAAAABLNQAEVEEAAEAAACjEgAAElEEAAEAAACjEgAAAAAA&#10;AHd3dy5pbmtzY2FwZS5vcmcAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAgH///////////////8AAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAMQAAAAAAAAAzAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAQAAAAHAAAA&#10;/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAEAAAAAAAAADQAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAEAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AABQAAAIoiAAAAAAAANQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAgEGAAAACAAAAP////8AAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAGAAAA8AIAAAAAAAAAgAAAAQAAABoA8HsiAAACAAAAfQAAAIAA&#10;AACY9hZCmPYWQoUcAAD/2P/gABBKRklGAAEBAQAmACYAAP/bAEMAAgEBAgEBAgICAgICAgIDBQ&#10;MDAwMDBgQEAwUHBgcHBwYHBwgJCwkICAoIBwcKDQoKCwwMDAwHCQ4PDQwOCwwMDP/bAEMBAgIC&#10;AwMDBgMDBgwIBwgMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA&#10;wMDAwMDP/AABEIAH0AgAMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJ&#10;Cgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8C&#10;QzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5&#10;eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4e&#10;Lj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1&#10;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&#10;nRZKLJZI71FYJrFCIp2CrZFYJ7FeYoPERolNEpsltkhsldgmsV1ih8QuiT0SeyXSL3f7JQ5KHJ&#10;Zoljgikd7Ykp7gcVzipMQpidMS6dVwjRLmgx1dG4IkiPuxUzIkBJ3XwL34eYIEoCMATWHUl0Qn&#10;0wXauaDJX9WiAZSSphP8rkHYQQCy7FlY9SVxXh2MrP6f3CO7wFrq//uiRlQIqH9gF5hA9f9WYG&#10;owF3hN8TtW4F0gCKh/jQpE2AuYPDzRK0FPA7iAV+3M8vLsAo1mVXI8Ufr92ysEjmWzTc0jAA22&#10;JfI9W3oBsScI0gMwOLpZgTeOIOhm6vx4XgEPLnCFchavwBMHLlA8e36ztQLILmDysqToHKwEhi&#10;C6dmb5I7rAELPsOVE2FswFblAz+wp8AoLAPnvOCLMhTLdfcZRUgdsVd4HvJeXNadtUoMobwuFU&#10;qvwKpLthqwpB+dmD/g+/AGLHCZaQOz4aAAAAAElFTkSuQmCCAgAAAKtrsAQwAIBgYHBgUIBwcHCQkICgwU&#10;DQwLCwwZEhMPFB0aHx4dGhwcICQuJyAiLCMcHCg3KSwwMTQ0NB8nOT04MjwuMzQy/9sAQwEJCQ&#10;kMCwwYDQ0YMiEcITIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy&#10;MjIyMjIy/8AAEQgAAQABAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCA&#10;kKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHw&#10;JDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eH&#10;l6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh&#10;4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EAL&#10;URAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoW&#10;JDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhI&#10;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&#10;AAAKAAAAACIFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAP7/AwoAAP////&#10;8AAAAAAAAAAAAAAAAAAAAAGgAAAFF1aWxsOTYgU3RvcnkgR3JvdXAgQ2xhc3MA/////wEAAAAA&#10;AAAA9DmycQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#10;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3YhSrgAAAB9pVFh0VGl0bGUAAAAAAEZyZWVwbGFuZUdU&#10;RF9sb2dvXzEyODMnn8AAAAAbdEVYdFRpdGxlAEZyZWVwbGFuZUdURF9sb2dvXzEyOH9jaiAAAA&#10;DwbWVUYf/+PAA/AHgAbQBsACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADAAIgAgAGUAbgBjAG8A&#10;ZABpAG4AZwA9ACIAVQBUAEYALQAxADYAIgA/AD4ADQAKADwAbQBlAHQAYQA+ADwAYwBvAG0AbQ&#10;BvAG4APgA8AGEAYwB0AHUAYQBsAF8AaQBtAGEAZwBlAF8AcwBpAHoAZQA+ADEAMgA4AC8AMQAy&#10;ADUAPAAvAGEAYwB0AHUAYQBsAF8AaQBtAGEAZwBlAF8AcwBpAHoAZQA+ADwALwBjAG8AbQBtAG&#10;8AbgA+ADwALwBtAGUAdABhAD4ADQAKADBtVEgAAAAASUVORK5CYII=" ID="ID_468068172" CREATED="1330901147632" MODIFIED="1330901147648"/>
</node>
</node>
</node>
</map>
